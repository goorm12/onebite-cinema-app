name: Claude Code Review
on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"
jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            ## 프로젝트 컨텍스트
            - **기술 스택**: React + TypeScript + Zustand + Vanilla Extract + Next.js
            - **아키텍처**: MVVM 패턴 (View-ViewModel-Model)
          
            ## 필수 검토 항목
          
            ### 🏗️ MVVM 패턴 준수
            - `components/` (View): UI 렌더링과 이벤트 처리만
            - `hooks/` (ViewModel): 비즈니스 로직, Zustand 구독
            - `api/` (Model): 데이터 통신만 담당
            
            **View (components/)에서 허용:**
            - 간단한 UI 상태 변경 핸들러
            - 폼 입력 처리 함수
            - ViewModel 함수의 단순 호출
            - 기본적인 이벤트 처리
  
            **ViewModel (hooks/)로 이동 필요:**
            - 비즈니스 로직이 포함된 함수
            - 데이터 변환/계산 로직
            - 복잡한 조건부 처리
            - API 호출 및 에러 처리
  
            간단한 UI 핸들러는 View에서 사용해도 되지만,
            비즈니스 로직이 포함되면 ViewModel로 분리해주세요.
          
            ### 📝 코드 가독성 (필수)
            - **복잡한 로직**: 왜 그렇게 구현했는지 설명 주석 필수
            - **변수명**: 명확하고 직관적 (예: `isUserLoggedIn`, `studentExamResults`)
          
            ### 🎯 네이밍 컨벤션
            - 폴더: kebab-case (`class-manage`)
            - 컴포넌트: PascalCase (`StudentList.tsx`)
            - 함수/변수: camelCase (`getUserData`)
            - API 함수: `api` 접두사 (`apiGetStudents`)
            - 상수: UPPER_CASE (`MAX_FILE_SIZE`)
            - Boolean: `is/has/can` 접두사 (`isLoading`)
          
            ### ⚡ React/TypeScript 규칙
            - Zustand 선택적 구독 사용
            - Recipe 우선 (Vanilla Extract)
            - 에러 처리 필수 (try-catch, 에러 로깅)
            - props 2개 이상 시 interface 정의
          
            ## 리뷰 요청
            위 컨텍스트를 바탕으로 다음을 중점 검토해주세요:
            - MVVM 패턴 위반 여부
            - 함수 주석 누락
            - 네이밍 컨벤션 위반
            - 보안/성능 이슈
            - TypeScript 타입 안전성
            
            **응답 형식:**
            - 발견된 문제점을 한글로 명확하게 설명
            - 수정 방법도 한글로 제안
            - 코드 예시는 그대로 두되, 설명은 모두 한글로
            - 스타일이나 사소한 문제는 무시하고 실제 문제만 지적

            **리뷰는 반드시 한국어로 작성해주세요.**
          
            **스타일이나 사소한 문제는 무시하고, 실제 문제가 될 수 있는 것만 간결하게 지적해주세요.**
